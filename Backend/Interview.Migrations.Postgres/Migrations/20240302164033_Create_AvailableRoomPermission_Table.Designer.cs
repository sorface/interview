// <auto-generated />
using System;
using Interview.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Interview.Migrations.Postgres.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240302164033_Create_AvailableRoomPermission_Table")]
    partial class Create_AvailableRoomPermission_Table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AppEventRole", b =>
                {
                    b.Property<Guid>("AppEventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.HasKey("AppEventId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("AppEventRole");
                });

            modelBuilder.Entity("Interview.Domain.Events.AppEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("ParticipantTypes")
                        .HasColumnType("text");

                    b.Property<bool>("Stateful")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("AppEvent");
                });

            modelBuilder.Entity("Interview.Domain.Events.DbRoomEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Stateful")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomEvents");
                });

            modelBuilder.Entity("Interview.Domain.Invites.Invite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UsesCurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("UsesMax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(5);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("Interview.Domain.Questions.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Interview.Domain.Reactions.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Type");

                    b.ToTable("Reactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("48bfc63a-9498-4438-9211-d2c29d6b3a93"),
                            CreateDate = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Dislike",
                            UpdateDate = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d9a79bbb-5cbb-43d4-80fb-c490e91c333c"),
                            CreateDate = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Like",
                            UpdateDate = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Interview.Domain.Rooms.AvailableRoomPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PermissionId");

                    b.ToTable("AvailableRoomPermission");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68fd7f70-a8f6-4e48-9f6f-239ea5403c0b"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("220380d1-fd72-4004-aed4-22187e88b386"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7391)
                        },
                        new
                        {
                            Id = new Guid("f6415e91-8fec-4db1-b10d-cb0aa701e433"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("eac25c4b-28d5-4e22-93b2-5c3caf0f6922"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7394)
                        },
                        new
                        {
                            Id = new Guid("deab2b06-2bd8-43b6-8e8a-3d9292b79ee7"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("6938365f-752d-453e-b0be-93facac0c5b8"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7394)
                        },
                        new
                        {
                            Id = new Guid("539a3c93-3d47-441b-883e-b1adffba5263"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("b5c4eb71-50c8-4c13-a144-0496ce56e095"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7394)
                        },
                        new
                        {
                            Id = new Guid("2b492711-38cd-47ba-82bf-55d31a149c16"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("7c4d9ac2-72e7-466a-bcff-68f3ee0bc65e"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7394)
                        },
                        new
                        {
                            Id = new Guid("cc5b111f-3dad-49f9-94bd-e792b73fa02c"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("882ffc55-3439-4d0b-8add-ba79e2a7df45"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7395)
                        },
                        new
                        {
                            Id = new Guid("76ceabda-48e1-473f-89ce-c47d3f975cbb"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("5ac11db0-b079-40ab-b32b-a02243a451b3"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7395)
                        },
                        new
                        {
                            Id = new Guid("b7dd1cd0-151f-43f0-8066-8cc6c356cf10"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("7df4ea9b-ded5-4a1d-a8ea-e92e6bd85269"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7395)
                        },
                        new
                        {
                            Id = new Guid("75a4dc48-00ae-4d6c-b75e-d5b5fc499106"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("97b2411a-b9d4-49cb-9525-0e31b7d35496"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7395)
                        },
                        new
                        {
                            Id = new Guid("2b4dd437-a2d6-4e0b-9a35-fc7f8a0c7503"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("9f020c9e-e0b4-4e6d-9fb3-38ba44cfa3f9"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7396)
                        },
                        new
                        {
                            Id = new Guid("6d960671-f5d3-4990-9c80-949bc06a21b8"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("b7ad620a-0614-494a-89ca-623e47b7415a"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7396)
                        },
                        new
                        {
                            Id = new Guid("e99d462d-4212-40da-8f73-1c09740c2264"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("a63b2ca5-304b-40a0-8e82-665a3327e407"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7396)
                        },
                        new
                        {
                            Id = new Guid("edf149fb-5170-410c-9441-e47754fb90ff"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("1f6c85db-c2a0-4096-8ead-a292397ab4e5"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7396)
                        },
                        new
                        {
                            Id = new Guid("10d0fccb-e1a6-487c-a90a-f151d28c7520"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("0827aeef-bcc1-4412-b584-0de4694422ce"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7397)
                        },
                        new
                        {
                            Id = new Guid("6c3b3738-27e3-4672-ab65-51009b086774"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("d1916ab5-462e-41d7-ae46-f1ce27d514d4"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7397)
                        },
                        new
                        {
                            Id = new Guid("a764ecf3-c604-41f4-acf0-d078011a0104"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("9ce5949f-a7b9-489c-8b04-bd6724aff687"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7397)
                        },
                        new
                        {
                            Id = new Guid("320dfad1-a3b5-454a-b00e-5c652c3da40d"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("4c3386da-cbb2-4493-86e8-036e8802782d"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7397)
                        },
                        new
                        {
                            Id = new Guid("a1487bb9-a09d-4a34-aa99-2c3b508e3712"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("1bb49aa7-1305-427c-9523-e9687392d385"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7398)
                        },
                        new
                        {
                            Id = new Guid("8c27b00d-f883-4c90-868f-6d1cb3784b3c"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("150f05e3-8d73-45e9-8ecd-6187f7b96461"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7398)
                        },
                        new
                        {
                            Id = new Guid("7d9d21f2-cc49-44e6-85e0-cca68268cdb5"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("a115f072-638a-4472-8cc3-4cf04da67cfc"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7398)
                        },
                        new
                        {
                            Id = new Guid("472a31d0-ccf3-4f83-80e8-bb49262547ec"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("4f7a0200-9fe1-4d04-9bcc-6ed668d07828"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7398)
                        },
                        new
                        {
                            Id = new Guid("29783be4-03a2-463c-a2ea-d60586f582c7"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PermissionId = new Guid("5f088b45-704f-4f61-b4c5-05bd08b80303"),
                            UpdateDate = new DateTime(2024, 3, 2, 16, 40, 33, 582, DateTimeKind.Utc).AddTicks(7399)
                        });
                });

            modelBuilder.Entity("Interview.Domain.Rooms.QueuedRoomEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.ToTable("QueuedRoomEvents");
                });

            modelBuilder.Entity("Interview.Domain.Rooms.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AcсessType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<char>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character(1)")
                        .HasDefaultValue('N');

                    b.Property<string>("TwitchChannel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Interview.Domain.Rooms.RoomConfigurations.RoomConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodeEditorContent")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("RoomConfiguration");
                });

            modelBuilder.Entity("Interview.Domain.Rooms.RoomInvites.RoomInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InviteById")
                        .HasColumnType("uuid");

                    b.Property<string>("ParticipantType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValue("Viewer");

                    b.Property<Guid?>("RoomById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InviteById");

                    b.HasIndex("RoomById");

                    b.ToTable("RoomInvites");
                });

            modelBuilder.Entity("Interview.Domain.Rooms.RoomParticipants.RoomParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("RoomParticipants");
                });

            modelBuilder.Entity("Interview.Domain.Rooms.RoomQuestionReactions.RoomQuestionReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<Guid>("ReactionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomQuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ReactionId");

                    b.HasIndex("RoomQuestionId");

                    b.HasIndex("SenderId");

                    b.ToTable("RoomQuestionReactions");
                });

            modelBuilder.Entity("Interview.Domain.Rooms.RoomQuestions.RoomQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("QuestionId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomQuestions");
                });

            modelBuilder.Entity("Interview.Domain.Rooms.RoomReviews.RoomReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("SeRoomReviewState")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("RoomReview");
                });

            modelBuilder.Entity("Interview.Domain.Rooms.RoomState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RoomId", "Type")
                        .IsUnique();

                    b.ToTable("RoomStates");
                });

            modelBuilder.Entity("Interview.Domain.Tags.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("HexColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Interview.Domain.Users.Permissions.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08a4237e-4b59-4896-a7f1-d41c6810d1aa"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "AppEventById",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ecced60f-2e64-45a6-8a0d-9d2c67a18792"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "AppEventByType",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7dd0b001-12f2-4d1b-8d2f-db800fbe54b2"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "AppEventCreate",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e71da275-6ee3-4def-a964-127f1aea9be6"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "AppEventPage",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7cb3381b-4135-4b2f-ad8a-85992b3be582"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "AppEventUpdate",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1f6c85db-c2a0-4096-8ead-a292397ab4e5"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "DeleteRoomState",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cebe2ad6-d9d5-4cfb-9530-925073e37ad5"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "QuestionArchive",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("eac25c4b-28d5-4e22-93b2-5c3caf0f6922"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "QuestionCreate",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a2117904-59f1-4990-ae7f-d3d9d415f38e"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "QuestionDeletePermanently",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("94d1bd4d-d3cd-47c0-a223-a4e80287314b"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "QuestionFindById",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("189309c5-0bff-46a6-8539-5fc6bf77983e"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "QuestionFindPage",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6f652e58-1229-4a3c-b8cb-328bf817ad54"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "QuestionFindPageArchive",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("32e18595-1c0a-4dd5-bad7-2cbfbccbcb2a"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "QuestionUnarchive",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("175f724e-7299-4a0b-b827-0d4b0c6aed6b"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "QuestionUpdate",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("004cca49-9857-4973-9bda-79b57f60279b"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "ReactionFindPage",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7c4d9ac2-72e7-466a-bcff-68f3ee0bc65e"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomAddParticipant",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5ac11db0-b079-40ab-b32b-a02243a451b3"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomClose",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c4c21128-f672-47d0-b0f5-2b3ca53fc420"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomCreate",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6938365f-752d-453e-b0be-93facac0c5b8"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomFindById",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("aad7a083-b4dc-437e-a5db-c28512dedb5f"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomFindPage",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a63b2ca5-304b-40a0-8e82-665a3327e407"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomGetAnalytics",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b7ad620a-0614-494a-89ca-623e47b7415a"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomGetAnalyticsSummary",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("97b2411a-b9d4-49cb-9525-0e31b7d35496"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomGetState",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9ce5949f-a7b9-489c-8b04-bd6724aff687"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomParticipantChangeStatus",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d1916ab5-462e-41d7-ae46-f1ce27d514d4"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomParticipantCreate",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4c3386da-cbb2-4493-86e8-036e8802782d"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomParticipantFindByRoomIdAndUserId",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4f7a0200-9fe1-4d04-9bcc-6ed668d07828"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomQuestionChangeActiveQuestion",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a115f072-638a-4472-8cc3-4cf04da67cfc"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomQuestionCreate",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("150f05e3-8d73-45e9-8ecd-6187f7b96461"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomQuestionFindGuids",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1bb49aa7-1305-427c-9523-e9687392d385"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomQuestionReactionCreate",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5f088b45-704f-4f61-b4c5-05bd08b80303"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomReviewCreate",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("64f1a5ed-e22a-4574-8732-c1aa6525f010"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomReviewFindPage",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("220380d1-fd72-4004-aed4-22187e88b386"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomReviewUpdate",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("882ffc55-3439-4d0b-8add-ba79e2a7df45"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomSendEventRequest",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7df4ea9b-ded5-4a1d-a8ea-e92e6bd85269"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomStartReview",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b5c4eb71-50c8-4c13-a144-0496ce56e095"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RoomUpdate",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6eac768e-7345-42e0-80d3-b4d269d80e2e"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "TagCreate",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5c12dbf7-3cf9-40b2-9cab-203621129342"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "TagFindPage",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6f814f95-59f5-4591-acd5-545dfb981a31"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "TagUpdate",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9f020c9e-e0b4-4e6d-9fb3-38ba44cfa3f9"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "TranscriptionGet",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0827aeef-bcc1-4412-b584-0de4694422ce"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "UpsertRoomState",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("53af37b0-2c68-4775-9ddb-ab143ce92fec"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "UserChangePermission",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6439dbeb-1b8e-49b3-99e4-2a95712a3958"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "UserFindById",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3f05ddc0-ef78-4916-b8b2-17fa11e95bb5"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "UserFindByNickname",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0cb3a389-14b6-41a5-914b-3fd5cc876b28"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "UserFindByRole",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c65b3cd1-0532-4b3a-8b25-5128b4124aa0"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "UserFindPage",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("946dff13-dfa5-424c-9891-6fcaa1e45ad1"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "UserGetPermissions",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1c876e71-24d2-4868-9385-23078c0b1c18"),
                            CreateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "UserUpsertByTwitchIdentity",
                            UpdateDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Interview.Domain.Users.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab45cf57-aa1c-11ed-970f-98dc442de35a"),
                            CreateDate = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin",
                            UpdateDate = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ab45a82b-aa1c-11ed-abe8-f2b335a02ee9"),
                            CreateDate = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "User",
                            UpdateDate = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Interview.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("TwitchIdentity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PermissionUser", b =>
                {
                    b.Property<Guid>("PermissionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("PermissionsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PermissionUser");
                });

            modelBuilder.Entity("QuestionTag", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("QuestionId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("QuestionTag");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("RoomTag", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("RoomId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("RoomTag");
                });

            modelBuilder.Entity("AppEventRole", b =>
                {
                    b.HasOne("Interview.Domain.Events.AppEvent", null)
                        .WithMany()
                        .HasForeignKey("AppEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview.Domain.Users.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Interview.Domain.Events.AppEvent", b =>
                {
                    b.HasOne("Interview.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Interview.Domain.Events.DbRoomEvent", b =>
                {
                    b.HasOne("Interview.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Interview.Domain.Rooms.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Interview.Domain.Invites.Invite", b =>
                {
                    b.HasOne("Interview.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Interview.Domain.Questions.Question", b =>
                {
                    b.HasOne("Interview.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Interview.Domain.Reactions.Reaction", b =>
                {
                    b.HasOne("Interview.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Interview.Domain.Rooms.AvailableRoomPermission", b =>
                {
                    b.HasOne("Interview.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Interview.Domain.Users.Permissions.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Interview.Domain.Rooms.QueuedRoomEvent", b =>
                {
                    b.HasOne("Interview.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Interview.Domain.Rooms.Room", null)
                        .WithOne("QueuedRoomEvent")
                        .HasForeignKey("Interview.Domain.Rooms.QueuedRoomEvent", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Interview.Domain.Rooms.Room", b =>
                {
                    b.HasOne("Interview.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Interview.Domain.Rooms.RoomConfigurations.RoomConfiguration", b =>
                {
                    b.HasOne("Interview.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Interview.Domain.Rooms.Room", "Room")
                        .WithOne("Configuration")
                        .HasForeignKey("Interview.Domain.Rooms.RoomConfigurations.RoomConfiguration", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Interview.Domain.Rooms.RoomInvites.RoomInvite", b =>
                {
                    b.HasOne("Interview.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Interview.Domain.Invites.Invite", "Invite")
                        .WithMany()
                        .HasForeignKey("InviteById");

                    b.HasOne("Interview.Domain.Rooms.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Invite");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Interview.Domain.Rooms.RoomParticipants.RoomParticipant", b =>
                {
                    b.HasOne("Interview.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Interview.Domain.Rooms.Room", "Room")
                        .WithMany("Participants")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Interview.Domain.Rooms.RoomQuestionReactions.RoomQuestionReaction", b =>
                {
                    b.HasOne("Interview.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Interview.Domain.Reactions.Reaction", "Reaction")
                        .WithMany()
                        .HasForeignKey("ReactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview.Domain.Rooms.RoomQuestions.RoomQuestion", "RoomQuestion")
                        .WithMany()
                        .HasForeignKey("RoomQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview.Domain.Users.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Reaction");

                    b.Navigation("RoomQuestion");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Interview.Domain.Rooms.RoomQuestions.RoomQuestion", b =>
                {
                    b.HasOne("Interview.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Interview.Domain.Questions.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview.Domain.Rooms.Room", "Room")
                        .WithMany("Questions")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Question");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Interview.Domain.Rooms.RoomReviews.RoomReview", b =>
                {
                    b.HasOne("Interview.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Interview.Domain.Rooms.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Interview.Domain.Rooms.RoomState", b =>
                {
                    b.HasOne("Interview.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Interview.Domain.Rooms.Room", "Room")
                        .WithMany("RoomStates")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Interview.Domain.Tags.Tag", b =>
                {
                    b.HasOne("Interview.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Interview.Domain.Users.Permissions.Permission", b =>
                {
                    b.HasOne("Interview.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Interview.Domain.Users.Roles.Role", b =>
                {
                    b.HasOne("Interview.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Interview.Domain.Users.User", b =>
                {
                    b.HasOne("Interview.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("PermissionUser", b =>
                {
                    b.HasOne("Interview.Domain.Users.Permissions.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionTag", b =>
                {
                    b.HasOne("Interview.Domain.Questions.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview.Domain.Tags.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Interview.Domain.Users.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoomTag", b =>
                {
                    b.HasOne("Interview.Domain.Rooms.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview.Domain.Tags.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Interview.Domain.Rooms.Room", b =>
                {
                    b.Navigation("Configuration");

                    b.Navigation("Participants");

                    b.Navigation("Questions");

                    b.Navigation("QueuedRoomEvent");

                    b.Navigation("RoomStates");
                });
#pragma warning restore 612, 618
        }
    }
}
